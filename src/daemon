## vim:ft=sh

# env: DAEMON_LOG_FILE: Internal variable where file redirections are saved.
DAEMON_LOG_FILE=
# env: DAEMON_LOG_LEVEL: Internal variable to store daemon log level.
DAEMON_LOG_LEVEL=
# env: DAEMON_INTERVAL: Internal variable to store daemon interval time.
DAEMON_INTERVAL=
# env: DAEMON_COMMANDS: Internal variable to store commands to run in bg.
DAEMON_COMMANDS=

# env: NOLOG: if true do not log anything
NOLOG=false
# env: PIDFILE: Internal variable where pidfile path is saved.
PIDFILE=

# fun: daemon_reload_config
# txt: reload daemon config from config file
daemon_reload_config ()
{
  PIDFILE="$(config_get daemon.pidfile)"
  DAEMON_LOG_FILE="${CONFIG[daemon.log.file]}"
  case "$DAEMON_LOG_FILE" in
    none) NOLOG=true;;
    stdout|STDOUT|stderr|STDERR) DAEMON_LOG_FILE="";;
    *) DAEMON_LOG_FILE=">> ${DAEMON_LOG_FILE}";;
  esac
  DAEMON_LOG_LEVEL="${CONFIG[daemon.log.level]}"
  case "${DAEMON_LOG_LEVEL}" in
    error) DAEMON_LOG_FILE+=" 2>&1 >/dev/null";;
    info) DAEMON_LOG_FILE+=" 2>&1";;
  esac
  DAEMON_INTERVAL="${CONFIG[daemon.interval]}"
  DAEMON_COMMANDS="${CONFIG[daemon.commands]}"
}

# fun: daemon_run
# txt: Run the commands configured for the daemon every interval.
daemon_run ()
{
  daemon_reload_config

  trap daemon_reload_config HUP

  # while sleep ...
  while sleep "${DAEMON_INTERVAL:-300}"
  do
    if ! ${NOLOG:-false}; then
      eval "main_standalone ${DAEMON_COMMANDS} ${DAEMON_LOG_FILE}"
    fi
  done
}

# fun: daemon_start [--foreground]
# txt: Start daemon in background or in foreground in --foreground flag
#      is present.
daemon_start ()
{
  local pid
  daemon_reload_config

  [[ -r "${PIDFILE}" ]] && pid="$(<"${PIDFILE}")"

  if [[ "$pid" ]]; then
    fatal $"There are another daemon running. Force quit with daemon kill"
  else
    daemon_run &
    echo "$!" > "${PIDFILE}"

    info $"Starting daemon at pid %d" "$!"
    if [[ "$1" = "--foreground" ]]; then
      on_exit "daemon_stop"
      wait
    else
      disown
    fi
  fi
}

# fun: daemon_stop <signal>
# txt: Stop daemon running in background with signal passed as argument.
daemon_stop ()
{
  local pid
  daemon_reload_config

  [ -r "${PIDFILE}" ] && pid="$(<"${PIDFILE}")"

  if [[ "$pid" ]]; then
    pkill "-${1:-INT}" -P "$pid" && rm "${PIDFILE}"
  fi
}

# fun: daemon_list
# txt: print if the daemon is currently running.
daemon_list ()
{
  local pid
  daemon_reload_config

  [ -r "${PIDFILE}" ] && pid="$(<"${PIDFILE}")"

  if [[ "$pid" ]]; then
    info $"Daemon running at pid: %d" "$pid"
  else
    info $"There is no daemon running"
  fi
}
