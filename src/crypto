## vim:ft=sh

# fun: crypto_requirements
# txt: ensure that specific requirements for crypto management are
#      present in the system
crypto_requirements ()
{
  REQUIREMENTS+=( "+gpg" )
  reqs_eval
}

# fun: crypto_keygen <account_id> <tstamp> <passphrase-file>
# txt: generate key pair for the specific account and echoes the key_id of the
#      generated one. The crver is v1 by default. Read tl-crypto(7) man page
#      for details.
crypto_keygen ()
{
  crypto_requirements

  local keyid

  gpg_helper \
    --passphrase-file "$3" \
    --quick-gen-key "$1@$2" "ed25519" cert,sign never ||
    E=3 error $"Unable to create master key for account $1 (v1)."

  keyid="$(crypto_keyid "$1@$2")"

  [[ "$keyid" ]] || E=3 fatal $"Unable to retrieve recent generate keyID"

  gpg_helper \
    --passphrase-file "$3" \
    --quick-add-key "$keyid" "cv25519" encr never ||
    E=3 error $"Unable to create encryption key for account $1 (v1)"

  gpg_helper \
    --passphrase-file "$3" \
    --quick-add-uid "$keyid" "$1@timeline" ||
    E=3 error $"Unable to create user-id for account $1 (v1)"

  echo -e "5\ny\nsave\n" | 
    gpg_helper --no-batch --command-fd 0 \
      --expert --edit-key "$keyid" trust >/dev/null 2>/dev/null ||
      E=3 error $"Unable to trust keyID $keyid"
}

# fun: crypto_keyid <account_id>
# txt: get the fingerprint for the key associated to specific account id.
crypto_keyid ()
{
  local -a out
  mapfile -d $'\n' out < <(
    gpg_helper --keyid-format long -k "$1${2:+@$2}" 2>/dev/null
  )
  [[ "${out[1]// /}" ]] &&
    echo "${out[1]// /}"
}

# fun: crypto_import <account_id> <keyfile>
# txt: import a key from the account_id into the timeline keyring
crypto_import ()
{
  local status account="$1" keyfile="$2" kind keyid uid

  crypto_requirements
  status="$(temp_file)"

  gpg_helper --status-file "$status" --import "$keyfile" ||
    E=3 error $"Unable to import key file %s" "$keyfile"

  while read -r _ kind keyid uid _; do
    case "$kind" in
      IMPORTED) 
        if [[ "${uid%@*}" != "$account" ]]; then
          if gpg_helper --yes --delete-keys "$keyid"; then
            error $"Ignoring key %s: account does not match %s != %s" \
              "$keyid" "${uid%@*}" "$account"
          else
            error $"\!\!\! SECURITY RISK \!\!\!"
            error $"You've been imported an invalid key."
            error $"Key %s does not belong to account owner %s" "$keyid" "$account."
            error $"Timeline was try to remove it from the keyring, but something weird happened."
            error $"Read manual tl-crypto(1) to know more about how to handle this."
            E=3 fatal $"Unable to remove an invalid key."
          fi
        fi
    esac
  done < "$status"
}

# fun: crypto_export <account_id> <file>
# txt: export public key of the specific account id to file
crypto_export ()
{
  crypto_requirements
  gpg_helper --no-comments --no-emit-version \
    --armor --export "$1@timeline" > "$2" ||
    E=3 error $"Unable to export keys for account $1"
}

# fun: crypto_revoke <account_name> <key_id>
# txt: revoke a specific key_id
crypto_revoke ()
{
  local rcert
  local homedir="${CONFIG[account.$1.keyring]}"
  crypto_requirements

  [[ -r "${homedir}/openpgp-revocs.d/$2.rev" ]] ||
    E=4 fatal $"KeyID $1 does not have revocation certificate."

  rcert="$(< "${homedir}/openpgp-revocs.d/$2.rev")"
  gpg_helper --import <<< "${rcert//:---/---}" || # remove : guard 
    E=4 fatal $"Unable to revoke key"
}

# fun: crypto_uid <key_id> [match]
# txt: echoes the uid of the key_id or, if match provided, return true if
#      the uid match the pattern.
crypto_uid ()
{
  local line
  while read -r line; do
    case "$line" in
      uid:*)
        IFS=: read -r -a line <<< "$line"
        if [[ "$2" ]]; then
          [[ "${line[9]}" = "$2" ]] && return 0
        else
          echo "${line[9]}"
        fi
        ;;
    esac
  done < <(gpg_helper --with-colons -k "$1")
  ! [[ "$2" ]]
}

# fun: crypto_validate <key_id> <crver>
# txt: validate that specific key_id is conforminr crver specification
crypto_validate ()
{
  local kind val data
  crypto_requirements

  data="$(gpg_helper --keyid-format long -k "$1@timeline" 2>&1)" ||
    E=3 error $"Unable to validate key $1 ($2). Error was: '$data'."

  case "$2" in
    v1)
      while read -r kind val _; do
        case "$kind" in
          pub)
            [[ "${val#ed25519/}" = "${val}" ]] &&
              E=3 error $"Key $1 does not conform $2: Pub part is no ED25519"
            ;;
          sub)
            [[ "${val#cv25519/}" = "${val}" ]] &&
              E=3 error $"Key $1 does not conform $2: Sub part is no CV25519"
            ;;
        esac
      done <<< "$data"
      ;;
  esac
}

# fun: crypto_list
# txt: echoes a list of keys present in keyring
crypto_list ()
{
  local line flags pub=false
  while IFS=: read -r -a line; do
    case "${line[0]}" in
      pub)
        case "${line[1]}" in
          *r*) flags="R";;
          *) flags="";;
        esac
        pub=true;;
      fpr) "$pub" && echo "${line[9]} $flags";;
      *) pub=false;;
    esac
  done < <(gpg_helper --with-colons -k "$@")
}

# fun: crypto_encrypt [--anon] <recipient> <message> <passfile>
# txt: return a encrypted message for the specific recipient in REPLY var
crypto_encrypt ()
{
  local mesg arg='-r'
  local -a payload
  crypto_requirements

  [[ "$1" = "--anon" ]] && arg="-R" && shift

  mapfile -t -s 2 payload < <(
    gpg_helper -vv \
      --armor --passphrase-file "$3" \
      --sign --encrypt --no-comments --no-emit-version \
      "$arg" "$1@timeline" <<< "$2"
  ) 2>&1

  [[ ${#payload[@]} -eq 0 ]] && exit 4

  payload[-1]=''
  REPLY="${payload[*]}"
  REPLY="${REPLY// /}"
}

# fun: crypto_decrypt <account_id> <message> <passfile> [statusfile]
# txt: decrypt a previously encrypted message
crypto_decrypt ()
{
  local -a args
  local -a mesg=(
    "-----BEGIN PGP MESSAGE-----"
    ""
    "$2"
    "-----END PGP MESSAGE-----"
  )
  crypto_requirements

  [[ "$4" ]] && args+=( "--status-file=$4" )

  read -r < <(
    gpg_helper "${args[@]}" --passphrase-file "$3" -v --armor --decrypt \
      --try-secret-key "$1@timeline" <<< "$(join $'\n' "${mesg[@]}")"
  ) 2>&1 || REPLY=''
}

# fun: crypto_keyflags <keyid>
# txt: put in $REPLY a list of flags for the keyid passed as argument
crypto_keyflags ()
{
  local -a line
  local aux
  REPLY=''

  while IFS=: read -ra line ; do
    case "${line[0]}" in
      pub|sub) aux="${line[1]}";;
      fpr|fp2) [[ "${line[9]}" = "$1" ]] && REPLY="$aux" || true;;
    esac
  done < <(gpg_helper --with-colons -k "$1") ||
    E=3 fatal $"Unable to retrieve keyflags for key %s" "$1"
}

# fun: gpg_helper [args]
# txt: run gpg command with some well known parameters
gpg_helper ()
{
  local homedir

  [[ "$GNUPGHOME" ]] ||
    E=3 fatal $"GNUPGHOME not set executing $*"

  command "${CONFIG[crypto.gnupg-binary]:-exit}" --batch --no-tty \
    --no-auto-key-retrieve --auto-key-locate "local" \
    --trust-model always \
    --personal-cipher-preferences AES256 \
    --personal-digest-preferences SHA256 \
    "$@"
}
