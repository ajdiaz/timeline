## vim:ft=sh

FILTER_LIST=()

# fun: filter_tag <tags_to_filter> <eid>
# txt: return true if EID need to be filtered
filter_tag ()
{
  local fpattern="$1" eid="$2"
  local event tag

  [[ "$fpattern" = "*" ]] && return 0

  for event in $(event_labels "$eid"); do
    for tag in $(event_tags "$event"); do
      if any "$fpattern" "$tag"; then
        return 0
      fi
    done
  done
  return 1
}

# fun: filter_flag <flag_to_filter> <eid>
# txt: return true if EID need to be filtered
filter_flag ()
{
  local flag="$1" eid="$2"

  [[ "${flag}" ]] || return 0

  case "$flag" in
    new) [[ "${TIMELINE_WAS_PRINTED[$eid]}" ]] || return 0;;
    trust)
      [[ "${EVENTS_SIGN["$eid"]//\*/}" != "${EVENTS_SIGN["$eid"]}" ]] &&
        return 0;;
    signed-good)
      [[ "${EVENTS_SIGN["$eid"]//G/}" != "${EVENTS_SIGN["$eid"]}" ]] &&
        return 0;;
    signed-bad)
      [[ "${EVENTS_SIGN["$eid"]//B/}" != "${EVENTS_SIGN["$eid"]}" ]] &&
        return 0;;
    signed-unknown)
      [[ "${EVENTS_SIGN["$eid"]//U/}" != "${EVENTS_SIGN["$eid"]}" ]] &&
        return 0;;
    signed-expired)
      [[ "${EVENTS_SIGN["$eid"]//X/}" != "${EVENTS_SIGN["$eid"]}" ]] &&
        return 0
      [[ "${EVENTS_SIGN["$eid"]//Y/}" != "${EVENTS_SIGN["$eid"]}" ]] &&
        return 0;;
    signed-revoked)
      [[ "${EVENTS_SIGN["$eid"]//R/}" != "${EVENTS_SIGN["$eid"]}" ]] &&
        return 0;;
    signed-missing)
      [[ "${EVENTS_SIGN["$eid"]//E/}" != "${EVENTS_SIGN["$eid"]}" ]] &&
        return 0;;
    signed)
      case "${EVENTS_SIGN["$eid"]}" in
        G*|B*|U*|X*|Y*|R*|E*) return 0;;
      esac;;
  esac
  return 1
}

# fun: filter_view <view> <eid>
# txt: return true if EID need to be filtered
filter_view ()
{
  local fpattern="$1" eid="$2"
  read -ra view <<< "${CONFIG["views.$fpattern"]}"

  if [[ "${#view[@]}" -ne 0 ]]; then
    filter_eval "$eid" "${view[@]}"
  else
    E=1 fatal $"No view named: %s" "$fpattern"
  fi
}

# fun: filter_score {score-min|score-max} <value> <eid>
# txt: return true if EID need to be filtered according to score values
#      passsed as argument.
filter_score ()
{
  local kind="$1" value="$2" eid="$3"
  local score

  score="$(event_score "$eid")"

  case "$kind" in
    score-min)
      [[ "${score:-0}" -lt "${value}" ]] && return 0
    ;;
    score-max)
      [[ "${score:-0}" -gt "${value}" ]] && return 0
    ;;
    *)
      E=1 fatal $"Invalid score filter: %s" "$kind"
    ;;
  esac

  return 1
}

# fun: filter_text <pattern> <eid>
# txt: return true if especified eid contains text which match with pattern
#      passed as argument (glob pattern supported only).
filter_text ()
{
  local fpattern="$1" eid="$2"

  # shellcheck disable=SC2254
  case "${EVENTS_MESG["$eid"]}" in
    *$fpattern*) return 0;;
  esac
  return 1
}

# fun: filter_mention <eid>
# txt: return true if myself is mentioned in eid
filter_mention ()
{
  local eid="$1" uid pattern
  uid="${ACCOUNT_OID}"
  local -a reat=()

  # no acctive account
  [[ "$uid" ]] || return 1

  reat=( "@$uid" "@${uid:0:8}" "$(username "$uid")" )

  if [[ "${CONFIG[timeline.react-on-all]}" = "true" ]]; then
    reat+=( "@all" "@here" )
  fi

  for pattern in "${reat[@]}"; do
    filter_text "*${pattern}*" "$eid" && return 0
  done

  return 1
}

# fun: filter_engagement <eid>
# txt: return true if the event has engagement with your account
filter_engagement ()
{
  local eid="$1" uid="${ACCOUNT_OID}" link

  # no acctive account
  [[ "$uid" ]] || return 1

  case "${EVENTS_KIND["$eid"]}" in
    P) return 1;;
    R|T|S)
      link="${EVENTS_LINK["$eid"]}"
      link="${link#*:}"; link="${link%:*}"
      [[ "$link" = "$uid" ]] && return 0
      ;;
  esac
  return 1
}

# fun: filter_add <expr>
# txt: Add an expression filter
filter_add ()
{
  FILTER_LIST+=( "$@" )
}

# fun: filter_eval <eid> [<expr>...]
# txt: evaluate filtering of the eid for the specified mode. If this funcion
#      return 0, means that the item is filtered, otherwise is not filtered.
filter_eval ()
{
  local eid="$1" ret=0; shift

  [[ "$#" -eq 0 ]] && set -- "${FILTER_LIST[@]}"
  for exp in "$@"; do
    case "$exp" in
      -*) filter_eval_expr "$eid" "${exp#-}" && ret=1 || ret=0;;
      *) filter_eval_expr "$eid" "${exp#+}" && ret=0 || ret=1;;
    esac
  done
  return $ret
}

# fun: filter_eval_expr <eid> <expr>
# txt: eval an expression and return true if filtered or false if not
filter_eval_expr ()
{
  local eid="$1" expr="$2"

  case "$expr" in
    '') ;;
    tag:*)
      filter_tag "${expr#tag:}" "$eid" && return 0
      ;;
    score-min:*|score-max:*)
      filter_score "${expr%%:*}" "${expr#*:}" "$eid" && return 0
      ;;
    flag:*)
      filter_flag "${expr#flag:}" "$eid" && return 0
      ;;
    view:*)
      filter_view "${expr#view:}" "$eid" && return 0
      ;;
    mention)
      filter_mention "$eid" && return 0
      ;;
    engagement)
      filter_engagement "$eid" && return 0
      ;;
    *)
      filter_text "${expr#text:}" "$eid" && return 0
      ;;
  esac
  return 1
}
