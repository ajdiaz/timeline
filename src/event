## vim:ft=sh

# env: EID: store the last EID created
export EID=

# env: EVENT: associative array which contains parts of an event line.
declare -A EVENTS_KIND=()
declare -A EVENTS_DATE=()
declare -A EVENTS_LINK=()
declare -A EVENTS_TAGS=()
declare -A EVENTS_MESG=()
declare -A EVENTS_SIGN=()
declare -A EVENTS_SCORE=()
declare -A EVENTS_COMMIT=()
declare -A EVENTS_ENCROUT=()
declare -A EVENTS_CFLAGS=()

declare -A EVENTS_CROSS_REPLY=()
declare -A EVENTS_CROSS_TAGS=()
declare -A EVENTS_CROSS_SCORE=()
declare -a EVENTS_SORTED=()

ERR_TIME_DUPLICATED=$"Duplicated timestamp for events %s and %s"

# fun: event_load_line <account_id> <fname> <commit> <flags> <content> <index> <encrout> <cflag>
# txt: parse a event line passed as argument and fill properly fields in
#      a associative array called EVENT. The account id is the OID
#      associated to the pull_url of the account.
#
#      The POST kind has the fields: timestamp,kind,message
#      The REPLY kind has the fields: timestamp,kind,ref,message
#      The TAG kind has the fields: timestamp,kind,ref,tags
#      The SCORE kind has the fields: timestamp,kind,ref,score
event_load_line ()
{
  local aid="$1" fname="$2" commit="$3" flags="$4" line="${5%$'\n'}"
  local encrout="$7" cflag="$8" show_untrusted t_output t_status
  local idx link mesg tags score hmac='' eid

  local datet="${line%% *}"
  local kind="${line#$datet }"; kind="${kind%% *}"
  local rest="${line#$datet $kind }"

  local -a status

  idx="$(( ${datet}000 + $6 ))"

  show_untrusted="${CONFIG["timeline.show-untrusted-items"]}"

  case "$kind" in
    P|POST)
      mesg="$rest"
      kind='post'
      oid "$mesg"
      hmac="${OID_CACHE["$mesg"]}"
      ;;
    R|REPLY)
      link="${rest%% *}"
      mesg="${rest#$link }"
      kind='reply'
      oid "$mesg"
      hmac="${OID_CACHE["$mesg"]}"
      ;;
    T|TAG)
      link="${rest%% *}"
      tags="${rest#$link }"
      kind='tag'
      oid "$link $tags"
      hmac="${OID_CACHE["$link $tags"]}"
      ;;
    S|SCORE)
      kind='score'
      link="${rest%% *}"
      score="${rest#$link }"
      case "$score" in
        -1) score="-1";;
        *) score="1";;
      esac
      oid "$link $score"
      hmac="${OID_CACHE["$link $score"]}"
      ;;
    E|ENCRYPTED)
      local ignore_anon rcpt="${rest%% *}"; mesg="${rest#$rcpt }"

      ignore_anon="$(config_eval \
        "account.$ACCOUNT_NAME.crypto-ignore-anon" \
        "account.crypto-ignore-anon"
      )"

      if [[ "$rcpt" = "${ACCOUNT_OID}" ]] ||
        [[ ("$rcpt" = "@all") && ($ignore_anon != "false") ]]; then
        t_output="$(temp_file)"; t_status="$(temp_file)"

        crypto_decrypt "${ACCOUNT_OID}" "$mesg" \
          "${CONFIG[account.$ACCOUNT_NAME.passphrase-file]:-/dev/null}" \
          "$t_status" > "$t_output" 2>&1

        mesg="$REPLY"

        while read -ra status; do
          case "${status[1]}" in
            DECRYPTION_KEY)
              crypto_keyflags "${status[2]}"
              cflag="${REPLY}" && break;;
          esac
        done < "$t_status"

        if  [[ "$mesg" ]]; then
          event_load_line "$1" "$2" "$3" "$4" "$mesg" "$6" "$(< "$t_output")" "$cflag"
        elif [[ "${CONFIG[timeline.show-anon-failed]}" = "true" ]]; then
          error $"Unable to decrypt anonymous message from %s." "$(username "$aid")"
        fi

      elif [[ "${CONFIG[timeline.show-all-encrypted]}" = "true" ]]; then
        info $"Encrypted message from %s to %s." "$(username "$aid")" "$(username "$rcpt")"
      fi
      return 0;;
    *)
      error $"Ignored malformed event: '$line'"
      return 0
      ;;
  esac

  [[ "$encrout" ]] && unset OID_CACHE["$mesg"]

  if [[ "$show_untrusted" = "true" ]]; then
    eid="$aid:$datet"
    case "$link" in
      *:*:*) flags+="*"; link="${link%:*}";;
    esac
  else
    eid="$aid:$datet:$hmac"
  fi

  EVENTS_KIND["$eid"]="$kind"
  EVENTS_DATE["$eid"]="$datet"
  EVENTS_LINK["$eid"]="$link"
  EVENTS_TAGS["$eid"]="$tags"
  EVENTS_MESG["$eid"]="$mesg"
  EVENTS_SIGN["$eid"]="$flags"
  EVENTS_COMMIT["$eid"]="$fname $commit"
  EVENTS_ENCROUT["$eid"]="$encrout"
  EVENTS_CFLAGS["$eid"]="$cflag"

  # XXX some array abused. Because arrays allows any index number, and are
  # sorted by definition, we do not need to sort anything.
  EVENTS_SORTED["$idx"]="$eid"

  if [[ "$kind" = 'reply' ]]; then
    EVENTS_CROSS_REPLY[$link]+=" $eid "
  elif [[ "$kind" = 'tag' ]]; then
    EVENTS_CROSS_TAGS[$link]+=" $eid "
  elif [[ "$kind" = 'score' ]]; then
    if ! [[ "${EVENTS_CROSS_SCORE[$aid:$link]}" ]]; then
      EVENTS_CROSS_SCORE["$aid:$link"]=1
      (( EVENTS_SCORE["$link"]+=score ))
    fi
  fi

  [[ "$ACCOUNT_NAME" ]] && notify "$eid"
}

# fun: event_sign <eid>
# txt: return true if EID is signed
event_sign ()
{
  echo "${EVENTS_SIGN[$1]}"
}

# fun: event_replies <eid>
# txt: given an specific eid return the eids of the replies of that post
event_replies ()
{
  local -a sorted_replies=()
  local idx

  for reply in ${EVENTS_CROSS_REPLY["$1"]}; do
    idx="${reply#*:}"; idx="${idx%%:*}$(printf %03d "$((RANDOM % 100))")"
    [[ "$reply" = "$1" ]] && E=3 error "$ERR_TIME_DUPLICATED" "$label" "$1"
    sorted_replies[$idx]="$reply"
  done

  echo "${sorted_replies[@]}"
}

# fun: event_labels <eid>
# txt: given an specific eid return the eids of the tags of that post
event_labels ()
{
  local -a sorted_labels=()
  local idx

  for label in ${EVENTS_CROSS_TAGS["$1"]}; do
    idx="${label#*:}"; idx="${idx%%:*}$(printf %03d "$((RANDOM % 100))")"
    [[ "$label" = "$1" ]] && E=3 error "$ERR_TIME_DUPLICATED" "$label" "$1"
    sorted_labels[$idx]="$label"
  done

  echo "${sorted_labels[@]}"
}

# fun: event_score <eid>
# txt: return the score of the specified event
event_score ()
{
  echo "${EVENTS_SCORE[$1]:-0}"
}

# fun: event_iter
# txt: print a list of events saved in memory
event_iter ()
{
  echo "${EVENTS_SORTED[@]}"
}

# fun: event_kind <eid>
# txt: given an event id, get the kind of the event
event_kind ()
{
  echo "${EVENTS_KIND["$1"]}"
}

# fun: event_date <eid>
# txt: given an event id, get the date of the event
event_date ()
{
  echo "${EVENTS_DATE["$1"]}"
}

# fun: event_link <eid>
# txt: given an event id, get the link of the event (only for TAGS and
#      REPLIES)
event_link ()
{
  echo "${EVENTS_LINK["$1"]}"
}

# fun: event_tags <eid>
# txt: given an event id, get the tags of the event (only for TAGS)
event_tags ()
{
  echo "${EVENTS_TAGS["$1"]}"
}

# fun: event_mesg <eid>
# txt: given an event id, get the message of the event (only for REPLY and
#      POST)
event_mesg ()
{
  echo "${EVENTS_MESG["$1"]}"
}

# fun: event_create <args>
# txt: create new event. Args can vary depends of event type, the order of
#      the arguments should be:
#      For posts: date kind mesg
#      For reply: date kind link mesg
#      For tags:  date kind link tags
#      For dms: date kind recipient mesg-base64
# env: EID: set this variable to the value of the EID to the created element.
event_create ()
{
  local auto_push content_markdown mesg line l
  local -a content

  auto_push="$(config_eval "account.${ACCOUNT_NAME}.auto-push" account.auto-push)"

  EID="$ACCOUNT_OID:$1"

  case "$2" in
    P) mesg="$3"; line="$*";;
    E) mesg="$4"; line="$*";;
    R|T|S)
      mesg="$4"
      case "$3" in
        *:*:*) line="$*" ;;
        *:*)
          if [[ "${EVENTS_MESG["$3"]}" ]]; then
            oid "${EVENTS_MESG["$3"]}"
            line="$1 $2 $3:${OID_CACHE["${EVENTS_MESG["$3"]}"]} $4"
          else
            E=1 error $"Try to reference a non-existant EID: $3"
          fi;;
        *) E=1 error $"Invalid EID reference: $*";;
      esac;;
  esac
  oid "$mesg"
  EID+=":${OID_CACHE["$mesg"]}"

  mapfile -t content < "${ACCOUNT_PATH}/$TIMELINE_CONTENT"

  echo "$line" > "${ACCOUNT_PATH}/$TIMELINE_CONTENT"
  for l in "${content[@]}"; do
    echo "$l" >> "${ACCOUNT_PATH}/$TIMELINE_CONTENT"
  done

  content_markdown="${CONFIG["account.${ACCOUNT_NAME}.content-markdown"]}"

  if ! [[ "$content_markdown" ]]; then
    content_markdown="${CONFIG[account.content-markdown]}"
  fi

  if [[ "$content_markdown" = "true" ]]; then
    markdown_generate
  fi

  account_commit "event: $line"

  if [[ "$auto_push" = "true" ]]; then
    account_push
  fi
}

# fun: event_info <eid>
# txt: given an eid, print the infortmation related with this event
event_info ()
{
  local eid="$1" date kind mesg tags reply link tag

  date="${EVENTS_DATE["$1"]}"
  kind="${EVENTS_KIND["$1"]}"

  if [[ -z "$kind" ]]; then
    E=1 error $"Not found information for EID '$eid'"
    return 1
  fi

  mesg="${EVENTS_MESG["$eid"]}"
  tags="${EVENTS_TAGS["$eid"]}"
  link="${EVENTS_LINK["$eid"]}"
  
  printf "%-10s %s\n" $"EID:"   "$eid"
  printf "%-10s %s (%s)\n" $"UID:"   "${eid%%:*}" "$(username "$eid")"
  # shellcheck disable=SC2183
  printf "%-10s %s (%(%Y-%m-%d %H:%M:%S)T)\n" $"Date:"  "$date" "$date"
  printf "%-10s %s\n" $"Kind:"   "${kind^^}"
  printf "%-10s %s\n" $"Link:"   "${link}"
  printf "%-10s %s\n" $"Tags:"   "${tags}"
  printf "%-10s %s\n" $"Mesg:"   "${mesg}"
  printf $"Tagged by:\n"

  local -A taggedas=()
  for item in $(event_labels "$eid"); do
    printf "  -  %s\n" "$item"
    for tag in ${EVENTS_TAGS["$item"]}; do
      taggedas["$tag"]=1
    done
  done
  printf $"Tagged as:\n"
  for item in "${!taggedas[@]}"; do
    printf "  -  %s\n" "$item"
  done
  printf $"Replied by:\n"
  for item in $(event_replies "$eid"); do
    printf "  -  %s\n" "$item"
  done

  case "${EVENTS_SIGN["$eid"]//\*/}" in
    G|B|U|X|Y|R|E)
      printf "%-10s %s\n" $"Signed:" $"Yes"
      printf $"Signature information:\n"

      git_helper -C "${EVENTS_COMMIT["$eid"]%% *}" \
        verify-commit "${EVENTS_COMMIT["$eid"]##* }" 2>&1 | prefix "     "
      ;;
    *)
      printf "%-10s %s\n" $"Signed:" $"No"
      ;;
  esac

  if [[ "${EVENTS_ENCROUT["$eid"]}" ]]; then
    printf "%-10s %s\n" $"Encrypted:" $"Yes"
    printf "%-10s %s\n" $"Encrypted Flags": "${EVENTS_CFLAGS["$eid"]}"
    printf "%-10s %s\n" $"Keyring:" "${CONFIG["account.$ACCOUNT_NAME.keyring"]}"
    printf $"Decryption Process Information:\n"

    echo "${EVENTS_ENCROUT["$eid"]}" | prefix "     "
  else
    printf "%-10s %s\n" $"Encrypted:" $"No"
  fi
}

# fun: event_load <account_id> <filename>
# txt: given an content filename, parse it and store events in memory
event_load ()
{
  local max_user_posts fname="$2" account="$1"
  local commit line aname="${CONFIG["user.alias-$account"]:-$account}"
  local -A gitlog

  max_user_posts="${CONFIG["account.${aname}.max-posts"]:-${CONFIG[account.max-posts]:-20}}"

  # shellcheck disable=SC1090
  source <(
    git_helper -C "${fname%/*}" log -s --pretty=format:"gitlog[%H]='%G?'" \
      --no-color "$fname"
  )

  _i() {
    case "${2}" in
      ''|\#*) return
    esac

    commit="${2%% *}";
    line="${2#$commit *) }";

    event_load_line "$account" "${fname%/*}" "$commit" \
      "${gitlog["$commit"]}" "${line//$'\e'[\[(]*([0-9;])[@-n]/}" "$1"
  }

  # shellcheck disable=SC2034
  mapfile -c 1 -n "${max_user_posts}" -C _i < <(
    git_helper -C "${fname%/*}" blame -s -l "$fname"
  )
}
