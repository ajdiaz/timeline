## vim:ft=sh

declare -xa TERMINAL_COLORS_FG=()
declare -xa TERMINAL_COLORS_BG=()

COLORS="$(tput colors)"
case "$COLORS" in
  8|256)
    for ((i=0; i<"${COLORS}"; i++)); do
      TERMINAL_COLORS_FG[$i]="$(tput setaf "$i")"
      TERMINAL_COLORS_BG[$i]="$(tput setab "$i")"
    done;;
esac

# fun: color_consistent <color> <item>
# txt: get a consistent color from color preference passed as argument. If
#      preference is `CONSISTENT`, then color is chosen randomly, but
#      consistenly with the item to be colorized. To choose colors use the
#      `colors` configuration variable
color_consistent ()
{
  if [[ "$1" != "CONSISTENT" ]]; then
    echo "$1"
  else
    local key=$((0x$(oid "$2")0))
    echo "${AVAIL_COLORS[$((key % ${#AVAIL_COLORS[@]}))]}"
  fi
}

# fun: color_eval <fg,bg> <dfg,dbg> <message>
# txt: print a message between colors defined in two first arguments.
color_eval ()
{
  local fg bg dfg dbg

  fg="${CONFIG["$1"]%,*}"; bg="${CONFIG["$1"]#*,}"; shift
  dfg="${CONFIG["$1"]%,*}"; dbg="${CONFIG["$1"]#*,}"; shift

  fg="$(color_consistent "$fg" "$1")"; dfg="$(color_consistent "$dfg" "$1")"
  bg="$(color_consistent "$bg" "$1")"; dbg="$(color_consistent "$dbg" "$1")"

  echo -n "${TERMINAL_COLORS_FG[${fg:-${dfg:-1000}}]}"
  echo -n "${TERMINAL_COLORS_BG[${bg:-${dbg:-1000}}]}"
  echo -e "\n$1"
  echo -n "${TERMINAL_COLORS_FG[${dfg:-1000}]}"
  echo -n "${TERMINAL_COLORS_BG[${dbg:-1000}]}"
}
