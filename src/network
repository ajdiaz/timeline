## vim:ft=sh

# env: NETWORK: an associative array which contains all network information
declare -A NETWORK_SCORE=()
declare -A NETWORK_PARENTS=()
declare -A NETWORK_ITEMS=()
declare -A NETWORK_UPDATED=()

NETWORK_PATH_PREFIX="network"

# fun: network_list
# txt: print the current discovered network
network_list ()
{
  local -a sort_score=()
  local max=0

  # first sort scores
  for items in "${!NETWORK_SCORE[@]}"; do
    sort_score[${NETWORK_SCORE["$items"]}]+=" $items "
    if [[ "${NETWORK_SCORE["$items"]}" -gt $max ]]; then
      max=${NETWORK_SCORE["$items"]}
    fi
  done


  # reverse score array and print results
  for ((;max>0; max--)); do
    items="${sort_score[$max]}"

    for item in $items; do
      format_compose network.list date "$(timestamp)"
      format_compose network.list name "NETWORK"
      format_compose network.list score "$max"
      format_compose network.list user "$(username "$item")"
      format_compose network.list url "${NETWORK_ITEMS["$item"]}"
      format_dumps network.list
      for follow in ${NETWORK_PARENTS["$item"]}; do
        format_compose network.list date "$(timestamp)"
        format_compose network.list name "NETWORK"
        format_compose network.follower user "$(username "$follow")"
        format_dumps network.follower
      done
    done
  done
}

# fun: network_load_repo <uid> <url> [parent]
# txt: load the repo follows
network_load_repo ()
{
  local uid="$1" url="$2" parent="$3" active_oid
  local path="${CACHE_DIR}/${NETWORK_PATH_PREFIX}/$1"
  active_oid="$(account_active_oid)"

  [[ "$uid" = "$active_oid" ]] && return

  [[ "$parent" ]] && NETWORK_PARENTS["$parent"]+=" $uid "

  while read -r fuid furl; do
    [[ "$fuid" = "$active_oid" ]] && continue
    NETWORK_ITEMS["$fuid"]="$furl"
    NETWORK_SCORE["$fuid"]="$((${NETWORK_SCORE["$fuid"]:-0}+1))"
    NETWORK_PARENTS["$fuid"]+=" $uid "
  done < <(follow_list "${path}")
}

# fun: network_load <path>
# txt: load network in cache to in-memory structure
network_load ()
{
  local path="$1" active_oid
  local cache="${CACHE_DIR}/${NETWORK_PATH_PREFIX}"
  active_oid="$(account_active_oid)"

  while read -r  uid url; do
    [[ "$active_oid" = "$uid" ]] && continue

    if [[ -d "${cache}/$uid" ]]; then
      network_load_repo "$uid" "$url"
    else
      error $"Unable to load repository '%s'. Try network refresh first." \
        "$uid"
    fi
  done < <(follow_list "$(account_active_path)")
}

# fun: network_refresh_repo <uid> <url> [count]
# txt: Refresh the network, looking for new followers in the graph.
network_refresh_repo ()
{
  local uid="$1" url="$2" count="${3:-0}" max_depth=
  local cache="${CACHE_DIR}/${NETWORK_PATH_PREFIX}"
  max_depth="$(config_get network.depth)"

  mkdir -p "${cache}"

  if [[ "$count" -gt "$max_depth" ]]; then
    error $"Max depth reached (%s) for uid '%s'" "$count" "$uid"
    return
  fi

  # This uid is already updated
  if [[ "${NETWORK_UPDATED["$uid"]}" = "true" ]]; then
    return
  fi

  if [[ -d "${cache}/$uid" ]]; then
    # repo already exists, just rebase
    if ! workon "${cache}/$uid" command git pull --rebase 2>&1; then
      error $"Unable to pull repository '%s' from '%s'" "$uid" "$url"
      return 1
    fi
  else
    # repo does not exists yet, cloning...
    if ! workon "${cache}" git clone --depth 1 "$url" "$uid" 2>&1; then
      error $"Unable to clone repository '%s' from '%s'" "$uid" "$url"
      return 1
    fi
  fi

  NETWORK_UPDATED["$uid"]=true

  while read -r uid url; do
    network_refresh_repo "$uid" "$url" "$((count++))"
  done < <(follow_list "${cache}/$uid")
}

# fun: network_refresh <path>
# txt: from initial path refresh the network
network_refresh ()
{
  local path="$1"
  NETWORK_UPDATED=()
  while read -r uid url; do
    network_refresh_repo "$uid" "$url"
  done < <(follow_list "$path")
}
