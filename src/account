## vim:ft=sh

# env: ACCOUNT_NAME: A variable contains the name of the active account.
export ACCOUNT_NAME=

# env: ACCOUNT_PATH: A variable contains the path of the active account.
export ACCOUNT_PATH=

# env: ACCOUNT_OID: A variable contains the OID of the active account.
export ACCOUNT_OID=

# fun: account_list
# txt: output a new-line separated list of defined accounts.
account_list ()
{
  local account

  for account in $(config_iter account.); do
    case "$account" in
      account.*.path)
        account="${account#account.}"
        account="${account%.path}"
        echo "$account"
      ;;
    esac
  done
}

# fun: account_load [name]
# txt: load the account named as argument, if argument is omit, then try to
#      load the account using the `account.default` configuration value or,
#      if missing and there is only one configured account this one.
#      Otherwise failed.
account_load ()
{
  local name="$1" pull_url changes

  name="${name:-${CONFIG[account.default]}}"

  if [[ -z "$name" ]]; then

    # try to infer the account name if none is provided
    
    read -ra all_accounts < <( account_list)

    case "${#all_accounts[@]}" in
      0) return 1;;
      1) name="${all_accounts[0]}";;
      *) E=1 fatal $"There are may accounts.";;
    esac

  fi

  ACCOUNT_NAME="$name"
  pull_url="${CONFIG["account.$ACCOUNT_NAME.pull-url"]}"

  [[ "$pull_url" ]] ||
    E=2 fatal $"Unknown account $ACCOUNT_NAME"

  oid "$pull_url"
  ACCOUNT_OID="${OID_CACHE["$pull_url"]}"
  ACCOUNT_PATH="$(config_get "account.$ACCOUNT_NAME.path")"

  export GNUPGHOME="${CONFIG[account.$ACCOUNT_NAME.keyring]}"

  changes="$(git_helper -C "${ACCOUNT_PATH}" status --porcelain 2>&1)" ||
    E=3 error $"Unable to check account status"
  if [[ "$changes" ]]; then
    error $"Account is dirty. Maybe you edit your account manually and badly."
    error $"To repair just run: git -C '%s' reset --hard master" "$ACCOUNT_PATH"
    exit 100
  fi
}

export NOACTIVE=$"There are no active accounts"

# fun: account_exists [name]
# txt: return true if the account name passed as argument is a initialized
#      account. If name is omit, then use active account path.
account_exists ()
{
  local path=
  
  [[ "$1" ]] && path="${CONFIG["account.$1.path"]}"

  if [[ -z "$path" ]]; then
    path="${ACCOUNT_PATH}"
  fi
  [[ -d "${path%.git}/.git" ]]
}

# fun: account_keygen <oid> <tstamp> <name>
# txt: generate a new keypair for the account named name and the oid oid and
#      specific tstamp
account_keygen ()
{
  local name="$3" tstamp="$2" oid="$1"

  config_set "account.$name.keyring" "$(try_path "${CONFIG[crypto.keyring-path]}")/$name"

  mkdir -p "${CONFIG["account.$name.keyring"]}" &&
    chmod 700 "${CONFIG["account.$name.keyring"]}"

  export GNUPGHOME="${CONFIG["account.$name.keyring"]}"

  crypto_keygen "$oid" "$tstamp" \
    "${CONFIG[account.$name.passphrase-file]:-/dev/null}" 2>&1
}

# fun: account_create <name> <push_url> <pull_url> [path]
# txt: create a new account named as name, with specific push and pull url,
#      if path is provided then set the account path to this one, otherwise,
#      use the default path for accounts as prefix
account_create ()
{
  local name="$1" push_url="$2" pull_url="$3" path="$4" tstamp

  tstamp="$(timestamp)"

  [[ "${CONFIG["account.$name.path"]}" ]] &&
    E=1 fatal $"Another account already exists with that name"

  account_exists "$name" &&
    E=1 fatal $"Trying to initializating an already initialized account"
  
  path="${path:-$(try_path "$(config_get account.path)")/$name}"
  config_set "account.$name.push-url" "$push_url"
  config_set "account.$name.pull-url" "$pull_url"
  config_set "account.$name.path" "$path"

  oid "$pull_url"

  config_set "user.alias-${OID_CACHE["$pull_url"]}" "$name"

  [[ "${CONFIG[account.auto-keygen]}" = "true" ]] &&
    account_keygen "${OID_CACHE[$pull_url]}" "$tstamp" "$name"

  # create empty dir for init
  mkdir -p "$path" ||
    E=1 fatal $"Unable to create account directory: %s" "$path"

  git_helper -C "$path" init ${TIMELINE_EXPERIMENTAL_SHA256:+--object-format=sha256}
  account_config "$path" "$pull_url" "$1" "$tstamp"

  config_save "${CONFIG_FILE}"

  git_helper -C "$path" add .

  git_helper -C "$path" commit -m 'init' 2>&1
  git_helper -C "$path" remote add origin "$push_url" 2>&1
  git_helper -C "$path" push -u origin master 2>&1 ||
    E=2 fatal $"Unable to push initial commit"
}

# fun: account_clone <name> <push_url> <pull_url> [path]
# txt: clone new account named as name, from the specific push url,
#      if path is provided then set the account path to this one, otherwise,
#      use the default path for accounts as prefix
account_clone ()
{
  if [[ "$1" = "--force" ]]; then
    local force=true; shift
  else
    local force=false
  fi

  local name="$1" push_url="$2" pull_url="$3" path="$4"

  if ! $force && [[ "${CONFIG["account.$name.path"]}" ]]; then
    E=1 fatal $"Another account already exists with that name"
  else
    path="${path:-$(try_path "$(config_get account.path)")/$name}"
    config_set "account.$name.push-url" "$push_url"
    config_set "account.$name.pull-url" "$pull_url"
    config_set "account.$name.path" "$path"

    oid "$pull_url"

    [[ -z "${CONFIG[account.$name.keyring]}" ]] &&
      [[ "${CONFIG[account.auto-keygen]}" = "true" ]] &&
        account_keygen "${OID_CACHE[$pull_url]}" "$tstamp" "$name"

    config_set "user.alias-${OID_CACHE["$pull_url"]}" "$name"
    git_helper clone "$push_url" "$path" 2>&1
    git_helper -C "$path" submodule init 2>&1

    account_config "$path" "$pull_url" "$name" "timeline"

    config_save "${CONFIG_FILE}"
  fi
}

# fun: account_config <path> <pull_url> <name> <tstamp>
# txt: configure user and other required things in the repo
account_config ()
{
  local path="$1" pull_url="$2" name="$3" tstamp="$4" keyid
  oid "$pull_url"

  git_helper -C "$path" config user.name "${OID_CACHE["$pull_url"]}"
  git_helper -C "$path" config user.email "${OID_CACHE["$pull_url"]}@timeline"
  git_helper -C "$path" config core.preloadindex true
  git_helper -C "$path" config core.fscache true
  git_helper -C "$path" config gc.auto 256

  command touch "${path:?}/CONTENT"
  command mkdir -p "${path:?}/FOLLOW"

  if [[ "$tstamp" ]]; then
    keyid="$(crypto_keyid "${OID_CACHE["$pull_url"]}" "$tstamp")"

    if [[ "$keyid" ]]; then
      account_set_signkey "$name" "$keyid"
      crypto_export "${OID_CACHE["$pull_url"]}" "${path:?}/SIGNKEY"
      account_set_encrkey "$name" "$keyid"
      crypto_export "${OID_CACHE["$pull_url"]}" "${path:?}/ENCRKEY"

      export GNUPGHOME="${CONFIG[account.$name.keyring]}"
    fi
  fi

}

# fun: account_commit [message]
# txt: set a commit point into current active account
account_commit ()
{
  [[ "$ACCOUNT_PATH" ]] || E=1 fatal $"No active account to commit"

  git_helper -C "$ACCOUNT_PATH" add .

  if config_eval "account.$ACCOUNT_NAME.signkey" "account.signkey" >/dev/null
  then
    git_helper -C "$ACCOUNT_PATH" commit -S -m "${1:-autosave}"
  else
    git_helper -C "$ACCOUNT_PATH" commit -m "${1:-autosave}"
  fi
}

# fun: account_push [remote]
# txt: push active account content to remote passed as argument or, if
#      missing, to `origin`.
account_push ()
{
  # TODO Add support for multiple branches
  git_helper -C "${ACCOUNT_PATH}" push "${1:-origin}" master
}

# fun: account_refresh <path> [remote]
# txt: rebase changes to current account from remote passed as argument or,
#     if missing, `origin`.
account_refresh ()
{
  local line path="$1" commit=false; shift

  git_helper -C "$path" fetch --all --jobs "${CONFIG[git.jobs]:-4}" 2>&1
  # TODO Add support for multiple branches
  git_helper -C "$path" rebase "${1:-origin}/master" 2>&1
  git_helper -C "$path" submodule update --remote \
    --jobs "${CONFIG[git.jobs]:-4}" 2>&1

  while read -r _ line; do
    commit=true
    case "$line" in
      FOLLOW/*) account_import "${line#FOLLOW/}" "$path/$line";;
    esac
  done < <(git_helper -C "$path" status -s)

  ${commit} &&
    account_commit "chore: update submodules"

  git_helper -C "$path" repack -a -d --depth=250 --window=250 2>&1
}

# fun: account_delete [name]
# txt: delete account by name passed as argument or active account if none
#      name is provided.
account_delete ()
{
  local name="${1:-$ACCOUNT_NAME}" path pull_url

  path="$(config_get "account.$name.path")"
  pull_url="$(config_get "account.$name.pull-url")"
  
  oid "$pull_url"

  if [[ -d "$path" ]]; then
    rm -rf "$path"
  fi

  config_unset "account.$name"
  config_unset "user.alias-${OID_CACHE["$pull_url"]}"

  config_save "${CONFIG_FILE}"
}

# fun: account_set_signkey <name> <keyid>
# txt: set signing keyid for an existant account
account_set_signkey ()
{
  if [[ "$2" ]]; then
    git_helper -C "$(config_get "account.$1.path")" config user.signingkey "$2"
  else
    git_helper -C "$(config_get "account.$1.path")" config --unset user.signingkey
  fi

  config_set "account.$1.signkey" "$2"
}

# fun: account_set_encrkey <name> <keyid>
# txt: set encryption keyid for an existant account
account_set_encrkey ()
{
  config_set "account.$1.encrkey" "$2"
}

# fun: account_preview <url> [filter]
# txt: preview the contents of the specified url repo filtered with the
#      specific if present.
account_preview ()
{
  local tmpdir depth
  tmpdir="$(temp_dir)"
  depth="${CONFIG[account.preview-depth]}"

  [[ "$depth" = "-1" ]] && depth=""

  git_helper clone ${depth:+--depth "${depth}"} "$1" "${tmpdir}" 2>&1 |
    info_multi ||
      E=1 error $"Unable to clone remote repo"

  oid "$1"
  timeline_load "${tmpdir}" "${OID_CACHE["$1"]}"
  shift
  timeline_list "$@"
}

# fun: account_keys
# txt: print the associated keys for the current account
account_keys ()
{
  local fpr flags

  while read -r fpr flags; do
    [[ "$fpr" = "${CONFIG[account.$ACCOUNT_NAME.signkey]}" ]] &&
      flags+='S'

    [[ "$fpr" = "${CONFIG[account.$ACCOUNT_NAME.encrkey]}" ]] &&
      flags+='E'

    echo "$fpr $flags"
  done < <(crypto_list "=${ACCOUNT_OID}@timeline")
}

# fun: account_import  <account> <path>
# txt: get public keys references in path
account_import ()
{
  local line account="$1" path="$2";

  # shellcheck disable=SC2016
  while read -r line; do
    case "$line" in
      ENCRKEY|SIGNKEY) crypto_import "$account" "$path/$line"
    esac
  done < <(git_helper -C "$path" show --pretty="" --name-only)
}
