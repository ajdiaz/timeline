Protocol specification
======================

Each timeline account is a git repository. The log of the repository is not
relevant for the timeline functionality. In the repo should exists a file
called `CONTENT`, which contains all publications for that repo, and optionally
a folder called `FOLLOW` where only submodules are stored.

When an account follow a new account just clone as submodule the remote
repository into the `FOLLOW` folder. The name of the folder is, by design,
the SHA object (generate with git) of the string of the URL, without the `.git`
extension if present.

The CONTENT file
----------------

The `CONTENT` file must have a line per publication. The line has the following
schema:

```
date kind body
```

Each line represent a *event*. A *event* could have different types, as
described below.

The **date** must be in UNIX seconds timestamp (an integer value). Sorry we don't
have higher precission, if you write more than one event per second, probably
no one wants to read you.

The **kind** is a character and must be one of the following:

  `P` →  a regular post (a event to share)
  `R` →  a reply to a other event (from the same or another account)
  `T` →  a tag for a event (from the same or another account)
  `S` →  a score for a event (from the same or another account)

Please note that except post, all other kinds refer to a event, and a event
could be a post, but also a reply, a tag... So you can tag a tag, or reply a
tag or... well, you know...

The **body** contains the event, and it will be different depending of
the kind, so:

  *post* →  body = text
    Where:
      `text`: the utf-8 encoded text of the post


  *reply* →  body = ref text
    Where:
      `ref`: a reference to the event to reply to (see references below)
      `text`: an utf-8 text containing the reply
    
  *tag* →  body = ref tag
    Where:
      `ref`: a reference to the event to reply to (see references below)
      `text`: an utf-8 text containing the tag name

  *score* →  body = ref number
    Where:
      `ref`: a reference to the event to reply to (see references below)
      `number`: could be `1` or `-1`, other values will be converted to `-1`.


References
----------

A reference has the following format:

```
account:timestamp[:hmac]
```

Where:

  *account* →  the SHA of the account of the event as was defined previously.
  *timestamp* →  the seconds of the event in UNIX timestamp
  *hmac* →  the SHA of the content of the event that refer, generated by git.

Note:
  Tough the *hmac* is optional, clients should have an option to mark or
  ignore events which hmac is not the same that the computed for the refered
  event. This field is designed to avoid a manual edit of the CONTENT file
  that can take advantage of previous interaction.

Text
----

Although the protocol only accept utf-8 strings, in fact, the default
implementation accept any characters, including non printing ones.
