.\" Automatically generated by Pandoc 2.14.0.1
.\"
.TH "TL-CRYPTO" "7" "2021-06-11" "Timeline v1.8-30-gf2d56f6" "Timeline Manual"
.hy
.SH NAME
.PP
tl-crypto - Cryptography in Timeline
.SH SYNOPSYS
.PP
\f[I]tl\f[R] *
.SH DESCRIPTION
.PP
This manual page will explain how encryption works in Timeline.
Timeline core uses \f[B]git\f[R](1) for signing (which uses GPG at the
bottom) and \f[B]gpg\f[R](1) directly for encryption.
.SH KEY GENERATION
.PP
By default Timeline will create a new key pair for each account that you
create or clone.
These key pairs will stored at a keyring per account.
The path of the keyring is made joining the value of
\f[I]crypto.keyring-path\f[R] with the account name (the human name
provided as alias if any, or the account OID in other case).
This will create keys using ED25519/CV25519 algorithms (read the
\f[B]gpg\f[R](1) manual for more information).
The private part of the key will be stored in the keyring path, and the
public part will be exported armored in two files in your account repo:
\f[I]ENCRKEY\f[R] and \f[I]SIGNKEY\f[R] for encryption and signing,
respectively.
.PP
\f[B]WARNING!\f[R] If you remove accidentally the keyring path of the
account you will lose all private keys for that account, which means
that you will be not able to recover any previously encrypted message or
signing new commits with the same key.
(Of course you can generate a new key pair).
.PP
You can generate at any time a new key pair using the command:
.IP
.nf
\f[C]
tl account keygen
\f[R]
.fi
.PP
This command will generate a new key pair for the current enable account
(you can use the \f[I]-a\f[R] option in the command line to select other
account different than default one).
.PP
When you generate a new key pair these will be enabled as default keys
for signing and encryption, and updating the \f[I]ENCRKEY\f[R] and
\f[I]SIGNKEY\f[R] files.
You can avoid this behaviour adding \f[I]\[en]no-default-encr\f[R] and
\f[I]\[en]no-default\[en]sign\f[R] to not set the key as default for
encryption and signing, respectively.
See \f[B]tl-account\f[R](1) for more information.
.PP
You can use the command \f[C]tl account keys\f[R] to see the current
available keys for your account.
.SS Generate keys for already existent account.
.PP
If you have a previous account without the crypto signing/encryption
support, and you want to enable it, just type
.IP
.nf
\f[C]
tl account keygen
\f[R]
.fi
.PP
This will create a new key pair and configure your account properly.
.PP
\f[B]NOTE!\f[R] All previous signing key that you was configured will be
forgotten, and new key pair will be used, unless on generation you set
\f[I]\[en]no-default-sign\f[R].
.PP
After the creation of the keys you can remove the configuration setting
\f[I]account.keyid\f[R] and \f[I]account.<account_name>.keyid\f[R] if
exists.
These values was in use previous to release 1.9, when timeline does not
support its own keyring and are not in use anymore.
.SH KEY IMPORTATION
.PP
If the configuration setting \f[I]crypto.auto-import\f[R] is set to
true, then on every \f[I]refresh\f[R] of the timeline, or in every
\f[I]follow add\f[R] command, Timeline will inspect the remote
repository for published \f[I]ENCRKEY\f[R] and \f[I]SIGNKEY\f[R] and
import them to the proper account keyring.
You can avoid this behaviour setting the configuration value to
\f[I]false\f[R], but then you need to handle manually the updating
process of your keyring.
We really discourage this approach.
Let timeline to handle keys for you.
.SH KEY REVOCATION
.PP
You can revoke a key at any time by the command
\f[C]tl account keyrevoke \[rs]<keyID\[rs]>\f[R].
Once the key is revoked another one is automatically selected as primary
key for signing and encryption (if the revoked one was the primary one,
of course).
You can change the default key as usual via the \f[I]account
encrkey\f[R] and \f[I]account singkey\f[R] commands.
.PP
The revoked key will be also exported in your \f[I]ENMCRKEY\f[R] or
\f[I]SIGNKEY\f[R] (or both) to inform your followers that this key is
invalid from now.
Previous revoked key will kept in the keyring to ensure to read and
verify old messages.
.SH SIGNING PROCESS
.PP
You can set any key to default as signing key using the command
\f[C]tl account signkey \[rs]<keyID\[rs]>\f[R].
If the key is set then on any event (post, reply\&...) you will sign the
commit with the proper key.
You can also change the key to sign using the previous command at any
moment.
.PP
\f[B]WARNING!\f[R] Try to avoid changing the key ID manually in the
configuration file.
Although this is possible, you need to change also the
\f[C].git/config\f[R] file in the proper repository manually, which can
provoke some confusion.
Is better to use the \f[B]tl-account\f[R](1) command to do that.
.SH ENCRYPTION PROCESS
.PP
The encryption of an event uses \f[B]gpg\f[R](1) to encrypt and sign the
event and save it as new event of \f[I]encrypted kind\f[R].
(Read \f[B]tl-event\f[R](1) and \f[B]tl-timeline\f[R](1) to know more
about event kinds).
This event include a recipient account (to who the message is intended
to).
The recipient can be an account ID (we call this a \f[I]direct\f[R]
message) or the special keyword \f[I]\[at]all\f[R] (we call this a
anonymous recipient message).
When \f[I]\[at]all\f[R] is used the message can be read for \[lq]anyone
with the key\[rq] and, in fact, is not very different of a direct
message, but keep the recipient hidden.
This is a plus for anonymity conversations.
By default timeline accept anonymous messages, but you can ignore all of
them setting \f[I]crypto.ignore-anon\f[R] configuration value to
\f[I]true\f[R].
.PP
Also if you do not specify that an encrypted event is anonymous (using
\f[C]--encrypt-anon\f[R] option in \f[B]tl-event\f[R](1) instead of
\f[C]--encrypt\f[R]), the encryption will be always direct, unless
\f[I]crypto.always-anon\f[R] configuration value was set to true.
.PP
The encrypted kind event contains also a BASE64 encoded cryptogram
produced by \f[B]gpg\f[R](1).
The encrypted details of a successfully decrypted message can be see
using \f[C]event info\f[R] command.
.PP
Also, if \f[I]account.encrypt-to-me\f[R] is set to true (by default),
timeline will also post the same payload encrypted to yourself (in
direct or anonymous message, depends on the option chosen to the
original message).
The idea behind this behaviour is to allows you to see encrypted
messages for other people.
Like you cannot decrypt messages for others, you need also to send a
message to yourself to can decrypt it.
.SH DECRYPTION PROCESS
.PP
When timeline detects an encrypted event, just try to decrypt the
payload.
If it\[cq]s a direct message and is not for us, just ignore the message,
unless \f[I]timeline.show-all-encrypted\f[R] configuration value is set
to true, in which case an informational message is printed (of course
you cannot decrypt a message that is not for you).
If the message is a direct one and it\[cq]s for us, then payload is
decrypted and new event with the content of the payload is processed.
.PP
\f[B]NOTE\f[R] In fact, an encrypted message is more like an encrypted
event, that means that the decrypted payload contains another event,
like a (plain) post, tag\&... But also is possible to encrypt a already
encrypted payload, and timeline just run the decryption process twice,
or more times if required.
By design the \f[B]tl\f[R](1) command does not allow you to encrypt more
than one time, but it should be possible in theory.
.PP
For anonymous encrypted messages, timeline will try to decrypt it with
any available secret key in the account\[cq]s keyring, unless
\f[I]crypto.ignore-anon\f[R] is set to true.
If the decryption process fails, the message is ignored silently (unless
\f[I]timeline.show-anon-failed\f[R] is set to true, in which case an
error message is displayed on the timeline).
.PP
Decrypted messages will never be cached for security reasons.
.SH USING AN EXTERNAL GENERATED KEYS
.PP
\f[B]WARNING!\f[R] We discourage the use of external keys in timeline
for some reasons.
The first one is that key could potentially exfiltrate some of your
personal data if you set them in your key, while the generated ones are
only associated with the timeline account.
The second one is that the updating process is responsible of the user,
so you need to verify the other\[cq]s key by hand.
.PP
If you want to use an external keyring it\[cq]s possible just setting
the configuration value \f[I]account.<account_name>.keyring\f[R] to the
path of your keyring (usually \f[C]\[ti]/.gnupg\f[R]).
This configuration value must be set by account for security reasons,
you cannot set a global \f[I]account.keyring\f[R].
Finally you must set your default keys using the commands \f[I]account
encrkey\f[R] and \f[I]account signkey\f[R].
Is also recommended to disable \f[I]account.auto-keygen\f[R] and
\f[I]crypto.auto-import\f[R] to avoid the creation and the importation
of other keys and kept clean your keyring.
.SH CONFIGURATION SETTINGS
.TP
\f[I]account.auto-keygen\f[R]=\f[I]true\f[R]
If set to \f[I]true\f[R] (the default) a new key pair will be created on
any \f[I]account create\f[R], \f[I]account clone\f[R] or \f[I]account
rebuild\f[R].
.TP
\f[I]account.<account_name>.encrkey\f[R], \f[I]account.<account_name>.signkey\f[R]
Contains the Key ID of the keys used to encrypt and to sign for the
specific account.
\f[B]DO NOT CHANGE THIS VALUE BY HAND. USE tl account encrkey OR tl
account signkey INSTEAD\f[R].
.TP
\f[I]account.encrypt-to-me\f[R]=\f[I]true\f[R]
If set to \f[I]true\f[R] (by default) also generate a new encrypted
message for yourself for any encrypted message that you post (read
\f[B]ENCRYPTION PROCESS\f[R] above for more information).
.TP
\f[I]crypto.gnupg-binary\f[R]=\f[I]gpg\f[R]
Set the path to the \f[B]gpg\f[R](1) binary to use, by default try to
find it from \f[C]$PATH\f[R].
.TP
\f[I]crypto.auto-import\f[R]=\f[I]true\f[R]
If set to \f[I]true\f[R] (the default) timeline will import keys from
followings automatically and update them when necessary.
.TP
\f[I]crypto.ignore-anon\f[R]=\f[I]false\f[R]
If set to \f[I]true\f[R] (\f[I]false\f[R], by default) timeline will
ignore all non-direct encrypted messages.
See \f[B]DECRYPTION PROCESS\f[R] above for more information).
.TP
\f[I]crypto.always-anon\f[R]=\f[I]false\f[R]
If set to \f[I]true\f[R] (\f[I]false\f[R], by default) all encrypted
events will be posted as anonymous messages instead of direct ones, even
if no anonymity flag is set in the command.
Read \f[B]ENCRYPTION PROCESS\f[R] above for more information.
.TP
\f[I]crypto.keyring-path\f[R]=\f[I]\f[R]X\f[I]\f[R]D\f[I]\f[R]G\f[I]~\f[R]D\f[I]~\f[R]A\f[I]\f[R]T\f[I]\f[R]A\f[I]~\f[R]H\f[I]~\f[R]O\f[I]\f[R]M\f[I]\f[R]E\f[I]/\f[R]t\f[I]\f[R]l\f[I]/\f[R]k\f[I]\f[R]e\f[I]\f[R]y\f[I]\f[R]r\f[I]\f[R]i\f[I]\f[R]n\f[I]\f[R]g\f[I]:HOME/.tl/keyring\f[R]
Set the PATH to prefix keyring.
When a new keyring is created for an account, timeline will search for
all paths in this variable if any of them is already created, if so then
use it as prefix for the keyring to the account (the final keyring will
be this prefix plus the account name).
If no one exists, then use the first one.
You can see this configuration setting as a global
\f[I]account.keyring\f[R], which is not used for security reasons.
.SH SOME DANGEROUS ERRORS
.TP
\f[I]ERROR Ignoring key XXX: account does not match YYY != ZZZ\f[R]
This error means that the remote account publish a key pair intended to
be someone else.
Timeline just remove these keys from your keyring.
Most of the cases this is a MITM attack attempt, but if you are really
sure that the key is correct, you need to import it manually using
\f[B]tl-gpg\f[R](1)
.TP
\f[I]SECURITY RISK. You\[cq]ve imported and invalid key\f[R]
This error should never happen.
Means that timeline import a key that cannot verify (see the previous
error), but timeline was not able to remove it from the keyring, so the
key is already imported.
You must fix it manually with \f[B]tl-gpg\f[R](1).
.SH NOTES
.IP \[bu] 2
All the encryption and the signing process of the timeline rest on the
shoulders of GPG, which means that it should be safe.
Of course any security concern in GPG will also affect timeline.
.SH SEE ALSO
.PP
\f[B]tl\f[R](1), \f[B]timeline\f[R](7), \f[B]tl-timeline\f[R](1),
\f[B]tl-event\f[R](1), \f[B]tl-config\f[R](1), \f[B]tl-account\f[R](1),
\f[B]gpg\f[R](1), \f[B]git\f[R](1), \f[B]tl-gpg\f[R](1).
.SH TIMELINE
.PP
Part of the \f[B]tl\f[R](1) suite.
